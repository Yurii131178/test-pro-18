{"version":3,"file":"page-3.js","sources":["../src/scripts/async.js"],"sourcesContent":["// Скасування тайм-ауту\n\n\n// Якщо з якихось причин нам потрібно скасувати відкладений виклик функції, зареєстрованої тайм-аутом, використовується метод clearTimeout(id).\n// Метод clearTimeout(id)приймає ідентифікатор таймера та “очищає його”, тобто видаляє реєстрацію відкладеного виклику функції з черги.\n\nimport { name } from \"./helper\";\n\n\n\nconst setBtn = document.querySelector(\".js-set\");\nconst clearBtn = document.querySelector(\".js-clear\");\nlet timeoutId;\n\nsetBtn.addEventListener(\"click\", () => {\n  timeoutId = setTimeout(() => {  // timerID\n    console.log(\"I love async JS!\");\n  }, 2000);\n});\n\nclearBtn.addEventListener(\"click\", () => {\n  clearTimeout(timeoutId);\n  console.log(`Timeout with id ${timeoutId} has stopped!`);\n});\n\n\n// можливість передати параметри до колбеку\n\nfunction logger(name, secondName) {\n    console.log(`Hello ${name} ${secondName}`)    \n}\n\nsetTimeout(logger, 1000, \"Alice\", \"Franko\"); //  після 2-го аргумента ми можемо додати передати додаткові параметри (name, secondName), які будуть передані в нашу ф-ю.\n\n// також можна передати в аргументи об'єкт.\n\nfunction logger1({name, secondName, str}) {\n    console.log(`Hello ${name} ${secondName}.`, str)    \n}\n\nsetTimeout(logger1, 1000, { name: \"Alice\", secondName: \"Franko\", str: \"Your room is ready. Welcome onboard!\" });\n\n\n// kahoot задачка //\nfor (let i = 3; i > 0; i--) {\n    console.log(i);    \n    const delay = i * 1000;\n    setTimeout(() => console.log(i), delay); // logs 3, 2, 1 with delays // 1, 2, 3\n} \n// Чому тка послідовність?  \n// тут, якщо при синхронному коді в циклі у нас послідовність від більшого до меншого 3, 2, 1. (рядок: 45) \n// при  const delay = i * 1000; ми отримаємо затримку: 3000, 2000, 1000 мс відповідно для 3, 2, 1 // рядок: 60\n\nfor (let i = 3; i > 0; i--) {       \n    const delay = i * 1000;  \n    console.log(delay);    \n} \n// відповідго наші знчення будуть виводитись в консоль з відповідною затримкою: 3 - через 3000мс, 2 - через 2000мс, 1 - через 1000мс!!!\n// тому результат: 1, 2, 3\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// метод setInterval(callback, delay, args)\n\n // setInterval(() => {\n//     console.log(\"jojoba\");  \n// }, 2500)\n\n// так само як setTimeot ас. метод, приймає першим аргументом ф-ю, другим - час, але на відміну від одноразової дії, інтревал буде повторювати ф-ю через заданий інтервал безкінечно. Додамо в зовнішню функцію аргумент(str), який буде переданий в нашу ф-ю.\n\n//створимо ф-ю зовні\n\nconst logger2 = (str) => {\n    console.log(`Hola!${str}`);    \n}\n \nsetInterval(logger2, 2000, \"Muchachos!\");\n\n// після 2-го аргумента ми можемо додати передати додаткові параметри\n// давайте тепер додамо всередині функції(name, secondName), які будуть передані в нашу ф-ю.\n\nconst logger3 = () => {\n    console.log(`Bongiorno,`);    \n}\n \nsetInterval((name1) => {\n    console.log(`Bongiorno, ${name1}`);\n    \n}, 2000, \"Mango!\");\n\n// ми передали у ф-ю параметр \"name\", аналогічно ці дані (\"Alice\") передажмо після часу нашої затримки 5000 мс\n\n// Очищення інтревалу за допомогою clearInterval(intervalID)\n// setInterval так само,як і setTimeout повертає нам в момент свого виклику унікальний ідентифікатор (id)\n\n// зробимо всередині КБФ\n\nconst intervalID = setInterval(() => {\n    console.log(\"trololo\");\n    \n}, 2000);\nconsole.log(intervalID);\n\nsetTimeout(() => {\n    clearInterval(intervalID);\n}, 5000)\n \n// для скасування/очищення інтервалу використаємо setTimeout із затримкою на 5000 мс, де запуститься КБФ, в тілі якої ми викликаємо метод clearInterval(intervalId)\n// наша функція відпрацює через 2 сек, 4 сек, а через секунду припиниться, тому що на 5 сек ми зупинили нроботу нашого інтервалу.\n\n\n///////////////////////////////////////////////\n// задачка - 2 половина лекції\n\n/**\n * - показуємо та ховаємо, додаючи/видаляючи клас is-visible\n * - ховаємо через певний час\n * - ховаємо при кліці\n * - не забуваємо читстити таймер * \n */\n\nconst NOTIFICATION_DELAY = 3000;\n\nconst notification = document.querySelector(\".js-alert\"); // отримаємо\nnotification.addEventListener(\"click\", onClick);\nlet timerID = null\n// відобразимо через функцію\n\nshowNotification();\n\nfunction onClick() {\n    // notification.classList.remove(\"is-visible\");\n    hideNotification();\n    clearTimeout(timerID) // при кліці повідомлення в консолі відсутнєб тому що ми осичтили наш таймаут    \n}\n\nfunction showNotification() {\n    notification.classList.add(\"is-visible\"); // додаємо клас is-visible, щоб показати повідомлення, щоб показати повідомлення і викликаємо ф-ю зверху.\n}\n\ntimerID = setTimeout(() => {\n    console.log(\"setTimeout\");\n    //notification.classList.remove(\"is-visible\"); // тут прибираємо клас is-visible, щоб приховати повідомлення\n    hideNotification();\n}, NOTIFICATION_DELAY) // через цей час функція спрацює\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// але у нас дублюється код!!!! == notification.classList.remove(\"is-visible\"); ==\n// тому застосуємо тут ф-ю для запобігання дублювання коду, винесемо шмат, що дублюєсться в окрему функцію.\n\nfunction hideNotification() {\n    notification.classList.remove(\"is-visible\");\n}\n\n// але є ще один ньюанc: у нас в консолі висить повідомлення setTimeout\n// приберемо його за допомогою clearTimeout але спочатку ідентифікатор \"приклеїмо\"\n// створимо змінну за допомогою кл. слова let timerId = null;(глобальна змінна)\n// коли ми сторюємо setTimeout він буде повертати свій ідентифікатор, ами його будемо зберігати в timerID\n// ми взяли функцію setTimeout і перед нею поставили \n// timerId = setTimeout(() => {\n    //console.log(\"setTimeout\");\n    //notification.classList.remove(\"is-visible\"); \n    //notification.classList.remove(\"is-visible\"); \n    // },\n    // NOTIFICATION_DELAY)\n\n\n\n\n \n\n  \n\n"],"names":["setBtn","clearBtn","timeoutId","logger","name","secondName","logger1","str","i","delay","logger2","name1","intervalID","NOTIFICATION_DELAY","notification","onClick","timerID","showNotification","hideNotification"],"mappings":"oCAUA,MAAMA,EAAS,SAAS,cAAc,SAAS,EACzCC,EAAW,SAAS,cAAc,WAAW,EACnD,IAAIC,EAEJF,EAAO,iBAAiB,QAAS,IAAM,CACrCE,EAAY,WAAW,IAAM,CAC3B,QAAQ,IAAI,kBAAkB,CAC/B,EAAE,GAAI,CACT,CAAC,EAEDD,EAAS,iBAAiB,QAAS,IAAM,CACvC,aAAaC,CAAS,EACtB,QAAQ,IAAI,mBAAmBA,CAAS,eAAe,CACzD,CAAC,EAKD,SAASC,EAAOC,EAAMC,EAAY,CAC9B,QAAQ,IAAI,SAASD,CAAI,IAAIC,CAAU,EAAE,CAC7C,CAEA,WAAWF,EAAQ,IAAM,QAAS,QAAQ,EAI1C,SAASG,EAAQ,CAAC,KAAAF,EAAM,WAAAC,EAAY,IAAAE,CAAG,EAAG,CACtC,QAAQ,IAAI,SAASH,CAAI,IAAIC,CAAU,IAAKE,CAAG,CACnD,CAEA,WAAWD,EAAS,IAAM,CAAE,KAAM,QAAS,WAAY,SAAU,IAAK,sCAAsC,CAAE,EAI9G,QAASE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,QAAQ,IAAIA,CAAC,EACb,MAAMC,EAAQD,EAAI,IAClB,WAAW,IAAM,QAAQ,IAAIA,CAAC,EAAGC,CAAK,CAC1C,CAKA,QAASD,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,MAAMC,EAAQD,EAAI,IAClB,QAAQ,IAAIC,CAAK,CACrB,CAeA,MAAMC,EAAWH,GAAQ,CACrB,QAAQ,IAAI,QAAQA,CAAG,EAAE,CAC7B,EAEA,YAAYG,EAAS,IAAM,YAAY,EASvC,YAAaC,GAAU,CACnB,QAAQ,IAAI,cAAcA,CAAK,EAAE,CAErC,EAAG,IAAM,QAAQ,EASjB,MAAMC,EAAa,YAAY,IAAM,CACjC,QAAQ,IAAI,SAAS,CAEzB,EAAG,GAAI,EACP,QAAQ,IAAIA,CAAU,EAEtB,WAAW,IAAM,CACb,cAAcA,CAAU,CAC5B,EAAG,GAAI,EAgBP,MAAMC,EAAqB,IAErBC,EAAe,SAAS,cAAc,WAAW,EACvDA,EAAa,iBAAiB,QAASC,CAAO,EAC9C,IAAIC,EAAU,KAGdC,IAEA,SAASF,GAAU,CAEfG,IACA,aAAaF,CAAO,CACxB,CAEA,SAASC,GAAmB,CACxBH,EAAa,UAAU,IAAI,YAAY,CAC3C,CAEAE,EAAU,WAAW,IAAM,CACvB,QAAQ,IAAI,YAAY,EAExBE,GACJ,EAAGL,CAAkB,EAOrB,SAASK,GAAmB,CACxBJ,EAAa,UAAU,OAAO,YAAY,CAC9C"}